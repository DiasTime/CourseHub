'use strict'

const decoder = new TextDecoder('utf-8')
const textDecoders = new Map([['utf-8', decoder]])

const decoders = new Map([
  ['utf-8', (data) => decoder.decode(data)],
  ['latin1', (data) => data.toString('latin1')],
  ['ascii', (data) => data.toString('ascii')],
  ['us-ascii', (data) => data.toString('ascii')],
  ['iso-8859-1', (data) => data.toString('latin1')],
  ['iso8859-1', (data) => data.toString('latin1')],
  ['iso88591', (data) => data.toString('latin1')],
  ['iso_8859-1', (data) => data.toString('latin1')],
  ['windows-1252', (data) => data.toString('windows-1252')],
  ['iso_8859-1:1987', (data) => data.toString('latin1')],
  ['cp1252', (data) => data.toString('cp1252')],
  ['x-cp1252', (data) => data.toString('cp1252')],
  ['utf16le', (data) => decoder.decode(new Uint16Array(data))],
  ['utf-16le', (data) => decoder.decode(new Uint16Array(data))],
  ['ucs2', (data) => decoder.decode(new Uint16Array(data))],
  ['ucs-2', (data) => decoder.decode(new Uint16Array(data))],
  ['base64', (data) => decoder.decode(Buffer.from(data, 'base64'))]
])

function getDecoder (charset) {
  return decoders.get(charset) || decoders.get('utf-8')
}

function decodeText (text, sourceEncoding, destEncoding) {
  if (text) {
    const decoder = getDecoder(destEncoding)
    if (typeof text === 'string') {
      return decoder(Buffer.from(text, sourceEncoding))
    }
    return decoder(text)
  }
  return text
}

module.exports = decodeText
