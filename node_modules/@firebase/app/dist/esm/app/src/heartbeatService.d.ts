/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { ComponentContainer } from '@firebase/component';
import { FirebaseApp } from './public-types';

export interface HeartbeatsByUserAgent {
  [userAgent: string]: number;
}

export interface HeartbeatsInIndexedDB {
  [date: string]: SingleDateHeartbeat[];
}

export interface SingleDateHeartbeat {
  userAgent: string;
  timestamp: number;
}

export class HeartbeatServiceImpl implements HeartbeatService {
  private readonly container: ComponentContainer;
  public _storage: HeartbeatStorageImpl;
  public _heartbeatsCache: HeartbeatsInIndexedDB | null;
  public _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;

  constructor(container: ComponentContainer) {
    this.container = container;
    this._storage = new HeartbeatStorageImpl(container.getApp());
    this._heartbeatsCache = null;
    this._heartbeatsCachePromise = this._storage.read().then((heartbeats) => {
      this._heartbeatsCache = heartbeats;
      return heartbeats;
    });
  }

  async triggerHeartbeat(): Promise<void> {
    const heartbeats = await this._storage.read();
    const today = new Date().toISOString().slice(0, 10);
    if (!heartbeats[today]) {
      heartbeats[today] = [];
    }
    const userAgent = navigator.userAgent;
    if (!heartbeats[today].some((h) => h.userAgent === userAgent)) {
      heartbeats[today].push({ userAgent, timestamp: Date.now() });
      await this._storage.add(heartbeats);
    }
  }

  async getHeartbeatsHeader(): Promise<string> {
    await this._heartbeatsCachePromise;
    const header = extractHeartbeatsForHeader(this._heartbeatsCache, 500);
    this._storage.overwrite(header.heartbeatsToSend);
    this._heartbeatsCache = null;
    return btoa(JSON.stringify(header.heartbeatsToSend));
  }
}

export function extractHeartbeatsForHeader(
  heartbeatsCache: SingleDateHeartbeat[],
  maxSize?: number
): { heartbeatsToSend: HeartbeatsByUserAgent[]; unsentEntries: SingleDateHeartbeat[] } {
  const heartbeatsToSend: HeartbeatsByUserAgent = {};
  const unsentEntries: SingleDateHeartbeat[] = [];
  for (const entry of heartbeatsCache) {
    if (!heartbeatsToSend[entry.userAgent]) {
      heartbeatsToSend[entry.userAgent] = 0;
    }
    heartbeatsToSend[entry.userAgent]++;
    unsentEntries.push(entry);
    if (maxSize && unsentEntries.length > maxSize) {
      break;
    }
  }
  return { heartbeatsToSend, unsentEntries };
}

export class HeartbeatStorageImpl implements HeartbeatStorage {
  app: FirebaseApp;
  private _canUseIndexedDBPromise: Promise<boolean>;

  constructor(app: FirebaseApp) {
    this.app = app;
    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }

  private async runIndexedDBEnvironmentCheck(): Promise<boolean> {
    // Implement IndexedDB environment check here.
    return true;
  }

  async read(): Promise<HeartbeatsInIndexedDB> {
    await this._canUseIndexedDBPromise;
    // Implement IndexedDB read here.
    return {};
  }

  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {
    await this._canUseIndexedDBPromise;
    // Implement IndexedDB overwrite here.
  }

  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {
    await this._canUseIndexedDBPromise;
    // Implement IndexedDB add here.
  }
}

function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {
  // Implement bytes calculation here.
  return 0;
}
