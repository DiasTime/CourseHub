/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<<<<<<< HEAD
import { FirebaseAuthInternal } from '@firebase/auth-interop-types';
import { AuthInternal } from '../../model/auth';
interface TokenListener {
    (tok: string | null): unknown;
}
export declare class AuthInterop implements FirebaseAuthInternal {
    private readonly auth;
    private readonly internalListeners;
    constructor(auth: AuthInternal);
    getUid(): string | null;
    getToken(forceRefresh?: boolean): Promise<{
        accessToken: string;
    } | null>;
    addAuthTokenListener(listener: TokenListener): void;
    removeAuthTokenListener(listener: TokenListener): void;
    private assertAuthConfigured;
    private updateProactiveRefresh;
}
export {};
=======

import { FirebaseAuthInternal } from '@firebase/auth-interop-types';
import { AuthInternal } from '../../model/auth';

interface TokenListener {
  (tok: string | null): void;
}

export declare class AuthInterop implements FirebaseAuthInternal {
  private readonly auth: AuthInternal;
  private readonly internalListeners: Set<TokenListener>;

  constructor(auth: AuthInternal) {
>>>>>>> 92dec27fdf3ebcb1f8ae0a00c18d5f3e95d36a79
