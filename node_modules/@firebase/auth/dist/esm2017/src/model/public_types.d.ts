import { FirebaseApp } from '@firebase/app';
import { CompleteFn, ErrorFn, FirebaseError, NextFn, Observer, Unsubscribe } from '@firebase/util';
import { FactorId as FactorIdMap, OperationType as OperationTypeMap, ActionCodeOperation as ActionCodeOperationMap } from './enum_maps';
import { MultiFactorSession } from './model/multi_factor_session';
import { ReactNativeAsyncStorage } from './platform_browser/async_storage';

export { CompleteFn, ErrorFn, NextFn, Unsubscribe };

export interface Config {
    apiKey: string;
    apiHost: string;
    apiScheme: string;
    tokenApiHost: string;
    sdkClientVersion: string;
    authDomain?: string;
}

export interface RecaptchaParameters {
    [key: string]: any;
}

export interface ParsedToken {
    'exp'?: string;
    'sub'?: string;
    'auth_time'?: string;
    'iat'?: string;
    'firebase'?: {
        'sign_in_provider'?: string;
        'sign_in_second_factor'?: string;
        'identities'?: Record<string, string>;
    };
    [key: string]: unknown;
}

export type NextOrObserver<T> = NextFn<T | null> | Observer<T | null>;

export interface AuthError extends FirebaseError {
    customData: {
        appName: string;
        email?: string;
        phoneNumber?: string;
        tenantId?: string;
    };
}

export interface AuthSettings {
    appVerificationDisabledForTesting: boolean;
}

export interface Auth {
    app: FirebaseApp;
    name: string;
    config: Config;
    setPersistence(persistence: Persistence): Promise<void>;
    languageCode: string | null;
    tenantId: string | null;
    settings: AuthSettings;
    onAuthStateChanged(nextOrObserver: NextOrObserver<User | null>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;
    beforeAuthStateChanged(callback: (user: User | null) => void | Promise<void>, onAbort?: () => void): Unsubscribe;
    onIdTokenChanged(nextOrObserver: NextOrObserver<User | null>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;
    authStateReady(): Promise<void>;
    currentUser: User | null;
    emulatorConfig: EmulatorConfig | null;
    updateCurrentUser(user: User | null): Promise<void>;
    useDeviceLanguage(): void;
    signOut(): Promise<void>;
}

export interface Persistence {
    type: 'SESSION' | 'LOCAL' | 'NONE';
}

export interface IdTokenResult {
    authTime: string;
    expirationTime: string;
    issuedAtTime: string;
    signInProvider: string | null;
    signInSecondFactor: string | null;
    token: string;
    claims: ParsedToken;
}

export interface ActionCodeInfo {
    data: {
        email?: string | null;
        multiFactorInfo?: MultiFactorInfo | null;
        previousEmail?: string | null;
    };
    operation: (typeof ActionCodeOperationMap)[keyof typeof ActionCodeOperationMap];
}

export declare const enum ActionCodeOperation {
    EMAIL_SIGNIN = "EMAIL_SIGNIN",
    PASSWORD_RESET = "PASSWORD_RESET",
    RECOVER_EMAIL = "RECOVER_EMAIL",
    REVERT_SECOND_FACTOR_ADDITION = "REVERT_SECOND_FACTOR_ADDITION",
    VERIFY_AND_CHANGE_EMAIL = "VERIFY_AND_CHANGE_EMAIL",
    VERIFY_EMAIL = "VERIFY_EMAIL"
}

export interface ActionCodeSettings {
    android?: {
        installApp?: boolean;
        minimumVersion?: string;
        packageName: string;
    };
    handleCodeInApp?: boolean;
    iOS?: {
        bundleId: string;
    };
    url: string;
    dynamicLinkDomain?: string;
}

export interface ApplicationVerifier {
    type: string;
    verify(): Promise<string>;
}

export interface AuthProvider {
    providerId: string;
}

declare enum FactorId {
    PHONE = "phone",
    TOTP = "totp"
}

export interface ConfirmationResult {
    verificationId: string;
   
