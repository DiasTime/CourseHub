/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { PersistenceValue, PersistenceType } from '../../core/persistence';

/**
 * Abstract base class for browser persistence classes.
 */
export abstract class BrowserPersistenceClass<T extends PersistenceValue = PersistenceValue> {
  /** The type of persistence provided by this class. */
  readonly type: PersistenceType;

  /** The storage object to use for persistence. */
  protected readonly storage: Storage;

  /**
   * Creates a new BrowserPersistenceClass instance.
   * @param storageRetriever A function that returns the storage object to use for persistence.
   * @param type The type of persistence provided by this class.
   */
  constructor(protected readonly storageRetriever: () => Storage, type: PersistenceType) {
    this.type = type;
    this.storage = storageRetriever();
  }

  /**
   * Checks if persistence is available.
   * @returns A promise that resolves to `true` if persistence is available, and `false` otherwise.
   */
  async isAvailable(): Promise<boolean> {
    // Implement this method in concrete subclasses.
    throw new Error('isAvailable method not implemented');
  }

  /**
   * Sets the value associated with the given key in the storage object.
   * @param key The key to associate the value with.
   * @param value The value to set.
   * @returns A promise that resolves when the value has
