import { PersistenceValue } from '../../core/persistence/';

const DB_NAME = "firebaseLocalStorageDb";
const _POLLING_INTERVAL_MS = 800;
const _TRANSACTION_RETRY_COUNT = 3;

interface IDBRequest<T = any> extends Promise<T> {
  result?: T;
}

interface IDBDatabase {
  transaction(storeNames: string[], mode: IDBTransactionMode): IDBTransaction;
}

interface IDBTransaction {
  objectStore(storeName: string): IDBObjectStore;
  abort(): void;
}

interface IDBObjectStore {
  put(data: PersistenceValue | string, key?: string): IDBRequest<void>;
  delete(key: string): IDBRequest<void>;
  clear(): IDBRequest<void>;
}

export async function _clearDatabase(db: IDBDatabase): Promise<void> {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(DB_NAME, 'readwrite');
    transaction.oncomplete = () => resolve();
    transaction.onerror = reject;
    transaction.objectStore(DB_NAME).clear();
  });
}

export async function _deleteDatabase(): Promise<void> {
  return indexedDB.deleteDatabase(DB_NAME);
}

export async function _openDatabase(): Promise<IDBDatabase> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, 1);
    request.onupgradeneeded = () => {
      request.result.createObjectStore(DB_NAME, { keyPath: 'key' });
    };
    request.onsuccess = () => resolve(request.result);
    request.onerror = reject;
  });
}

export async function _putObject(db: IDBDatabase, key: string, value: PersistenceValue | string): Promise<void> {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(DB_NAME, 'readwrite');
    transaction.oncomplete = () => resolve
