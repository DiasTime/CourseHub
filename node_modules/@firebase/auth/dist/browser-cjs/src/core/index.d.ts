/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  Auth,
  NextOrObserver,
  Persistence,
  User,
  CompleteFn,
  ErrorFn,
  Unsubscribe,
  PasswordValidationStatus,
} from "../model/public_types";
import {
  debugErrorMap,
  prodErrorMap,
  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as AuthErrorCodes,
} from "./errors";

export {
  setPersistence,
  initializeRecaptchaConfig,
  validatePassword,
  onIdTokenChanged,
  beforeAuthStateChanged,
  onAuthStateChanged,
  useDeviceLanguage,
  updateCurrentUser,
  signOut,
  revokeAccessToken,
  initializeAuth,
  connectAuthEmulator,
  AuthCredential,
  EmailAuthCredential,
  OAuthCredential,
  PhoneAuthCredential,
  inMemoryPersistence,
  EmailAuthProvider,
  FacebookAuthProvider,
  CustomParameters,
  GoogleAuthProvider,
  GithubAuthProvider,
  OAuthProvider,
  SAMLAuthProvider,
  TwitterAuthProvider,
  signInAnonymously,
  signInWithCredential,
  linkWithCredential,
  reauthenticateWithCredential,
  signInWithCustomToken,
  sendPasswordResetEmail,
  confirmPasswordReset,
  applyActionCode,
  checkActionCode,
  verifyPasswordResetCode,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  sendSignInLinkToEmail,
  isSignInWithEmailLink,
  signInWithEmailLink,
  fetchSignInMethodsForEmail,
  sendEmailVerification,
  verifyBeforeUpdateEmail,
  ActionCodeURL,
  parseActionCodeURL,
  updateProfile,
  updateEmail,
  updatePassword,
  getIdToken,
  getIdTokenResult,
  unlink,
  getAdditionalUserInfo,
  reload,
  deleteUser,
}

/**
 * @typedef {Object} AuthModule
 * @property {function(auth: Auth, persistence: Persistence): Promise<void>} setPersistence
 * @property {function(auth: Auth): Promise<void>} initializeRecaptchaConfig
 * @property {function(auth: Auth, password: string): Promise<PasswordValidationStatus>} validatePassword
 * @property {function(auth: Auth, nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe} onIdTokenChanged
 * @property {function(auth: Auth, callback: (user: User | null) => void | Promise<void>, onAbort?: () => void): Unsubscribe} beforeAuthStateChanged
 * @property {function(auth: Auth, nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe} onAuthStateChanged
 * @property {function(auth: Auth): void} useDeviceLanguage
 * @property {function(auth: Auth, user: User | null): Promise<void>} updateCurrentUser
 * @property {function(auth: Auth): Promise<void>} signOut
 * @property {function(auth: Auth, token: string): Promise<void>} revokeAccessToken
 * @property {function(auth: any): void} initializeAuth
 * @property {function(auth: any, emulatorHost: string, port: number): void} connectAuthEmulator
 * @property {function(provider: any): AuthCredential} EmailAuthCredential
 * @property {function(provider: any): AuthCredential} FacebookAuthCredential
 * @property {function(provider: any): AuthCredential} GoogleAuthProvider
 * @property {function(provider: any): AuthCredential} GithubAuthProvider
 * @property {function(persistence: any): Persistence} inMemoryPersistence
 * @property {function(email: string, password?: string, additionalUserInfo?: Record<string, any>): EmailAuthProvider} EmailAuthProvider
 * @property {function(id: string, redirectUrl?: string): CustomParameters} CustomParameters
 * @property {function(provider: any): OAuthCredential} OAuthCredential
 * @property {function(provider: any, options?: OAuthCredentialOptions): OAuthCredential} OAuthProvider
 * @property {function(id: string, displayName?: string, photoUrl?: string, email?: string, phoneNumber?: string): User} User
 * @property {function(id: string, displayName?: string, photoUrl?: string, email?: string, phoneNumber?: string): User} EmailAuthProvider
 * @property {function(id: string, displayName?: string, photoUrl?: string, email?: string, phoneNumber?: string): User} FacebookAuthProvider
 * @property {function(id: string, displayName?: string, photoUrl?: string, email?: string, phoneNumber?: string): User} GoogleAuthProvider
 * @property {function(id: string, displayName?: string, photoUrl?: string, email?: string, phoneNumber?: string): User} GithubAuthProvider
 * @property {function(id: string, displayName?: string, photoUrl?: string, email?: string, phoneNumber?: string): User} SAMLAuthProvider
 * @property {function(id: string, displayName?: string, photoUrl?: string, email?: string, phoneNumber?: string): User} TwitterAuthProvider
 * @property {function(auth: Auth): Promise<void>} signInAnonymously
 *
