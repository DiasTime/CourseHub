/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { SignInWithPhoneNumberRequest } from '../authentication/sms';
import { FinalizeMfaResponse } from '../authentication/mfa';
import { AuthInternal } from '../../model/auth';

/**
 * MFA Info as returned by the API.
 */
interface BaseMfaEnrollment {
    mfaEnrollmentId: string;
    enrolledAt: number;
    displayName?: string;
}

/**
 * An MFA provided by SMS verification.
 */
export interface PhoneMfaEnrollment extends BaseMfaEnrollment {
    phoneInfo: string;
}

/**
 * An MFA provided by TOTP (Time-based One Time Password).
 */
export interface TotpMfaEnrollment extends BaseMfaEnrollment {}

/**
 * MfaEnrollment can be either PhoneMfaEnrollment or TotpMfaEnrollment.
 */
export type MfaEnrollment = PhoneMfaEnrollment | TotpMfaEnrollment;

/**
 * Request to start enrolling a new MFA device via SMS.
 */
export interface StartPhoneMfaEnrollmentRequest {
    idToken: string;
    phoneEnrollmentInfo: {
        phoneNumber: string;
        recaptchaToken: string;
    };
    tenantId?: string;
}

/**
 * Response to a successful StartPhoneMfaEnrollmentRequest.
 */
export interface StartPhoneMfaEnrollmentResponse {
    phoneSessionInfo: {
        sessionInfo: string;
    };
}

/**
 * Starts the process of enrolling a new MFA device via SMS.
 * @param auth - The authentication object.
 * @param request - The request object.
 * @returns A Promise that resolves to the response object.
 */
export async function startEnrollPhoneMfa(auth: AuthInternal, request: StartPhoneMfaEnrollmentRequest): Promise<StartPhoneMfaEnrollmentResponse> {
    // Implementation here
}

/**
 * Request to finalize enrollment of a new MFA device via SMS.
 */
export interface FinalizePhoneMfaEnrollmentRequest {
    idToken: string;
    phoneVerificationInfo: SignInWithPhoneNumberRequest;
    displayName?: string | null;
    tenantId?: string;
}

/**
 * Response to a successful FinalizePhoneMfaEnrollmentRequest.
 */
export interface FinalizePhoneMfaEnrollmentResponse extends FinalizeMfaResponse {}

/**
 * Finalizes the process of enrolling a new MFA device via SMS.
 * @param auth - The authentication object.
 * @param request - The request object.
 * @returns A Promise that resolves to the response object.
 */
export async function finalizeEnrollPhoneMfa(auth: AuthInternal, request: FinalizePhoneMfaEnrollmentRequest): Promise<FinalizePhoneMfaEnrollmentResponse> {
    // Implementation here
}

/**
 * Request to start enrolling a new MFA device via TOTP.
 */
export interface StartTotpMfaEnrollmentRequest {
    idToken: string;
    totpEnrollmentInfo: {};
    tenantId?: string;
}

/**
 * Response to a successful StartTotpMfaEnrollmentRequest.
 */
export interface StartTotpMfaEnrollmentResponse {
    totpSessionInfo: {
        sharedSecretKey: string;
        verificationCodeLength: number;
        hashingAlgorithm: string;
        periodSec: number;
        sessionInfo: string;
        finalizeEnrollmentTime: number;
    };
}

/**
 * Starts the process of enrolling a new MFA device via TOTP.
 * @param auth - The authentication object.
 * @param request - The request object.
 * @returns A Promise that resolves to the response object.
 */
export async function startEnrollTotpMfa(auth: AuthInternal, request: StartTotpMfaEnrollmentRequest): Promise<StartTotpMfaEnrollmentResponse> {
    // Implementation here
}

/**
 * Request to finalize enrollment of a new MFA device via TOTP.
 */
export interface FinalizeTotpMfaEnrollmentRequest {
    idToken: string;
    totpVerificationInfo: {
        sessionInfo: string;
        verificationCode: string;
    };
    displayName?: string | null;
    tenantId?: string;
}

/**
 * Response to a successful FinalizeTotpMfaEnrollmentRequest.
 */
export interface FinalizeTotpMfaEnrollmentResponse extends FinalizeMfaResponse {}

/**
 * Finalizes the process of enrolling a new MFA device via TOTP.
 * @param auth - The authentication object.
 * @param request - The request object.
 * @returns A Promise that resolves to the response object.
 */
export async function finalizeEnrollTotpMfa(auth: AuthInternal, request: FinalizeTotpMfaEnrollmentRequest): Promise<FinalizeTotpMfaEnrollmentResponse> {
    // Implementation here
}

/**
 * Request to withdraw an MFA device.
 */
export interface WithdrawMfaRequest {
    idToken: string;
