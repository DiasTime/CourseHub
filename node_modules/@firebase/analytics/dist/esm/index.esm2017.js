import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';
import { Logger } from '@firebase/logger';
import { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';
import { Component } from '@firebase/component';
import '@firebase/installations';

const ANALYTICS_TYPE = 'analytics';
const GA_FID_KEY = 'firebase_id';
const ORIGIN_KEY = 'origin';
const FETCH_TIMEOUT_MILLIS = 60 * 1000;
const DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';

const logger = new Logger('@firebase/analytics');

const ERRORS = {
  // ... error messages ...
};

const ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);

function createGtagTrustedTypesScriptURL(url) {
  // ...
}

async function promiseAllSettled(promises) {
  // ...
}

function createTrustedTypesPolicy(policyName, policyOptions) {
  // ...
}

function insertScriptTag(dataLayerName, measurementId) {
  // ...
}

function getOrCreateDataLayer(dataLayerName) {
  // ...
}

async function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
  // ...
}

async function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
  // ...
}

function wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId) {
  // ...
}

function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
  // ...
}

function findGtagScriptOnPage(dataLayerName) {
  // ...
}

const LONG_RETRY_FACTOR = 30;
const BASE_INTERVAL_MILLIS = 1000;

class RetryData {
  constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {
    // ...
  }

  getThrottleMetadata(appId) {
    // ...
  }

  setThrottleMetadata(appId, metadata) {
    // ...
  }

  deleteThrottleMetadata(appId) {
    // ...
  }
}

function getHeaders(apiKey) {
  // ...
}

async function fetchDynamicConfig(appFields) {
  // ...
}

async function fetchDynamicConfigWithRetry(app, retryData = defaultRetryData, timeoutMillis) {
  // ...
}

async function attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData = defaultRetryData) {
  // ...
}

function setAbortableTimeout(signal, throttleEndTimeMillis) {
  // ...
}

function isRetriableError(e) {
  // ...
}

class AnalyticsAbortSignal {
  constructor() {
    // ...
  }

  addEventListener(listener) {
    // ...
  }

  abort() {
    // ...
  }
}

const defaultEventParametersForInit;

async function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {
  // ...
}

async function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {
  // ...
}

async function setUserId$1(gtagFunction, initializationPromise, id, options) {
  // ...
}

async function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {
  // ...
}

async function internalGetGoogleAnalyticsClientId(gtagFunction, initializationPromise) {
  // ...
}

async function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {
  // ...
}

const defaultConsentSettingsForInit;

function _setConsentDefaultForInit(consentSettings) {
  // ...
}

function _setDefaultEventParametersForInit(customParams) {
  // ...
}

async function validateIndexedDB() {
  // ...
}

async function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {
  // ...
}

class AnalyticsService {
  constructor(app) {
    // ...
  }

  _delete() {
    // ...
  }
}

let initializationPromisesMap = {};
let dynamicConfigPromisesList = [];
const measurementIdToAppId = {};
let dataLayerName = 'dataLayer';
let gtagName = 'gtag';
let gtagCoreFunction;
let wrappedGtagFunction;
let globalInitDone = false;

function settings(options) {
  // ...
}

function factory(app, installations, options) {
  // ...
}

/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */
function getAnalytics(app = getApp()) {
  // ...
}

/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */
function initializeAnalytics(app, options = {}) {
  // ...
}

/**
 * This is a public static method provided to users that wraps
