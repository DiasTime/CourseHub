/**
<<<<<<< HEAD
 * @license
=======
>>>>>>> 92dec27fdf3ebcb1f8ae0a00c18d5f3e95d36a79
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<<<<<<< HEAD
declare global {
    interface Document {
        documentMode?: number;
    }
}
/**
 * @param {?string=} ua The user agent.
 * @return {boolean} Whether the app is rendered in a mobile iOS or Android
 *     Cordova environment.
 */
export declare function _isAndroidOrIosCordovaScheme(ua?: string): boolean;
/** @return {boolean} Whether web storage is supported. */
export declare function _isWebStorageSupported(): boolean;
/**
 * @param {?Object=} global The optional global scope.
 * @return {boolean} Whether current environment is a worker.
 */
export declare function _isWorker(): boolean;
export declare function _isPopupRedirectSupported(): boolean;
/** Quick check that indicates the platform *may* be Cordova */
export declare function _isLikelyCordova(): boolean;
export declare function _isCordova(): Promise<boolean>;
export declare function _getSelfWindow(): Window | null;
=======

interface Document {
    documentMode?: number;
}

/**
 * Check if the app is rendered in a mobile iOS or Android Cordova environment.
 * @param ua The user agent. Defaults to navigator.userAgent.
 * @return {boolean} Whether the app is rendered in a mobile iOS or Android
 *     Cordova environment.
 */
function isAndroidOrIosCordovaScheme(ua?: string): boolean {
    ua = ua || navigator.userAgent;
    // Add your check logic here.
    return false;
}

/**
 * Check if web storage is supported.
 * @return {boolean} Whether web storage is supported.
 */
function isWebStorageSupported(): boolean {
    try {
        return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
        return false;
    }
}

/**
 * Check if the current environment is a worker.
 * @param global The optional global scope. Defaults to window.
 * @return {boolean} Whether current environment is a worker.
 */
function isWorker(global = window): boolean {
    return global === global.self && global.self.constructor.name === 'DedicatedWorkerGlobalScope' || global.self.constructor.name === 'SharedWorkerGlobalScope';
}

/**
 * Check if popup redirect is supported.
 * @return {boolean} Whether popup redirect is supported.
 */
function isPopupRedirectSupported(): boolean {
    // Add your check logic here.
    return false;
}

/**
 * Quick check that indicates the platform may be Cordova.
 * @return {boolean} Whether the platform is likely Cordova.
 */
function isLikelyCordova(): boolean {
    // Add your check logic here.
    return false;
}

/**
 * Check if the current environment is Cordova.
 * @return {Promise
>>>>>>> 92dec27fdf3ebcb1f8ae0a00c18d5f3e95d36a79
