/**
 * @license
<<<<<<< HEAD
 * Copyright 2020 Google LLC
=======
 * Copyright 2023 The Daily Waffle Ltd
>>>>>>> 92dec27fdf3ebcb1f8ae0a00c18d5f3e95d36a79
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<<<<<<< HEAD
import * as exp from '@firebase/auth/internal';
import * as compat from '@firebase/auth-types';
export declare function convertCredential(auth: exp.Auth, credentialPromise: Promise<exp.UserCredential>): Promise<compat.UserCredential>;
=======

import * as exp from '@firebase/auth/internal';
import * as compat from '@firebase/auth-types';

/**
 * Converts a UserCredential object from the internal format to the compatibility format.
 * @param auth - The Auth instance used to convert the UserCredential.
 * @param credentialPromise - A Promise that resolves to a UserCredential object in the internal format.
 * @returns A Promise that resolves to a UserCredential object in the compatibility format.
 */
export declare function convertCredential(auth: exp.Auth, credentialPromise: Promise<exp.UserCredential>): Promise<compat.UserCredential>;

/**
 * Converts a ConfirmationResult object from the internal format to the compatibility format.
 * @param auth - The Auth instance used to convert the ConfirmationResult.
 * @param confirmationResultPromise - A Promise that resolves to a ConfirmationResult object in the internal format.
 * @returns A Promise that resolves to a ConfirmationResult object in the compatibility format.
 */
>>>>>>> 92dec27fdf3ebcb1f8ae0a00c18d5f3e95d36a79
export declare function convertConfirmationResult(auth: exp.Auth, confirmationResultPromise: Promise<exp.ConfirmationResult>): Promise<compat.ConfirmationResult>;
